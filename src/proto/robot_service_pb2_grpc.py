# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import robot_service_pb2 as robot__service__pb2

GRPC_GENERATED_VERSION = '1.71.0rc2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in robot_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class RobotServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetRobots = channel.unary_stream(
                '/RobotService/GetRobots',
                request_serializer=robot__service__pb2.Empty.SerializeToString,
                response_deserializer=robot__service__pb2.RobotData.FromString,
                _registered_method=True)
        self.RegisterRobot = channel.unary_unary(
                '/RobotService/RegisterRobot',
                request_serializer=robot__service__pb2.RobotInfo.SerializeToString,
                response_deserializer=robot__service__pb2.RobotData.FromString,
                _registered_method=True)
        self.UnregisterRobot = channel.unary_unary(
                '/RobotService/UnregisterRobot',
                request_serializer=robot__service__pb2.RobotData.SerializeToString,
                response_deserializer=robot__service__pb2.Status.FromString,
                _registered_method=True)
        self.CheckRobot = channel.unary_unary(
                '/RobotService/CheckRobot',
                request_serializer=robot__service__pb2.RobotData.SerializeToString,
                response_deserializer=robot__service__pb2.Status.FromString,
                _registered_method=True)
        self.GetCaptain = channel.unary_unary(
                '/RobotService/GetCaptain',
                request_serializer=robot__service__pb2.Empty.SerializeToString,
                response_deserializer=robot__service__pb2.RobotData.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/RobotService/HealthCheck',
                request_serializer=robot__service__pb2.RobotData.SerializeToString,
                response_deserializer=robot__service__pb2.Commands.FromString,
                _registered_method=True)
        self.RegisterCaptain = channel.unary_unary(
                '/RobotService/RegisterCaptain',
                request_serializer=robot__service__pb2.RobotData.SerializeToString,
                response_deserializer=robot__service__pb2.Status.FromString,
                _registered_method=True)


class RobotServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetRobots(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterRobot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnregisterRobot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckRobot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCaptain(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterCaptain(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RobotServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetRobots': grpc.unary_stream_rpc_method_handler(
                    servicer.GetRobots,
                    request_deserializer=robot__service__pb2.Empty.FromString,
                    response_serializer=robot__service__pb2.RobotData.SerializeToString,
            ),
            'RegisterRobot': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterRobot,
                    request_deserializer=robot__service__pb2.RobotInfo.FromString,
                    response_serializer=robot__service__pb2.RobotData.SerializeToString,
            ),
            'UnregisterRobot': grpc.unary_unary_rpc_method_handler(
                    servicer.UnregisterRobot,
                    request_deserializer=robot__service__pb2.RobotData.FromString,
                    response_serializer=robot__service__pb2.Status.SerializeToString,
            ),
            'CheckRobot': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckRobot,
                    request_deserializer=robot__service__pb2.RobotData.FromString,
                    response_serializer=robot__service__pb2.Status.SerializeToString,
            ),
            'GetCaptain': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCaptain,
                    request_deserializer=robot__service__pb2.Empty.FromString,
                    response_serializer=robot__service__pb2.RobotData.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=robot__service__pb2.RobotData.FromString,
                    response_serializer=robot__service__pb2.Commands.SerializeToString,
            ),
            'RegisterCaptain': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterCaptain,
                    request_deserializer=robot__service__pb2.RobotData.FromString,
                    response_serializer=robot__service__pb2.Status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RobotService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('RobotService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RobotService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetRobots(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/RobotService/GetRobots',
            robot__service__pb2.Empty.SerializeToString,
            robot__service__pb2.RobotData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterRobot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/RobotService/RegisterRobot',
            robot__service__pb2.RobotInfo.SerializeToString,
            robot__service__pb2.RobotData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnregisterRobot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/RobotService/UnregisterRobot',
            robot__service__pb2.RobotData.SerializeToString,
            robot__service__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckRobot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/RobotService/CheckRobot',
            robot__service__pb2.RobotData.SerializeToString,
            robot__service__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCaptain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/RobotService/GetCaptain',
            robot__service__pb2.Empty.SerializeToString,
            robot__service__pb2.RobotData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/RobotService/HealthCheck',
            robot__service__pb2.RobotData.SerializeToString,
            robot__service__pb2.Commands.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterCaptain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/RobotService/RegisterCaptain',
            robot__service__pb2.RobotData.SerializeToString,
            robot__service__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
